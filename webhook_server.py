from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware  # Added CORS import
import uvicorn
import os
from datetime import datetime

app = FastAPI(title="Healthcare Chatbot API", version="1.0.0")

# Add CORS middleware - This fixes the connection error!
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Allows all origins (websites) to call your API
    allow_credentials=True,
    allow_methods=["*"],  # Allows all HTTP methods (GET, POST, etc.)
    allow_headers=["*"],  # Allows all headers
)

# Healthcare knowledge base (lightweight)
HEALTH_RESPONSES = {
    "fever": {
        "en": "ЁЯМбя╕П **Fever Management:**\nтАв Rest and drink plenty of fluids\nтАв Take paracetamol as directed\nтАв See doctor if >101.3┬░F for >3 days\nтЪая╕П Emergency if breathing difficulty",
        "hi": "ЁЯМбя╕П **рдмреБрдЦрд╛рд░ рдХрд╛ рдЗрд▓рд╛рдЬ:**\nтАв рдЖрд░рд╛рдо рдХрд░реЗрдВ рдФрд░ рдкрд╛рдиреА рдкрд┐рдПрдВ\nтАв рдбреЙрдХреНрдЯрд░ рдХреА рд╕рд▓рд╛рд╣ рд╕реЗ рдкреИрд░рд╛рд╕рд┐рдЯрд╛рдореЛрд▓ рд▓реЗрдВ\nтАв 101.3┬░F рд╕реЗ рдЕрдзрд┐рдХ рд╡ 3 рджрд┐рди рд╕реЗ рдЬреНрдпрд╛рджрд╛ рд╣реЛ рддреЛ рдбреЙрдХреНрдЯрд░ рдХреЛ рджрд┐рдЦрд╛рдПрдВ"
    },
    "vaccine": {
        "en": "ЁЯТЙ **Vaccination Schedule:**\nЁЯС╢ Birth: BCG, Hepatitis B\nЁЯН╝ 6 weeks: DPT-1, OPV-1\nЁЯУН 10 weeks: DPT-2, OPV-2\nЁЯОп 14 weeks: DPT-3, OPV-3\nЁЯПе Find centers: Call 1075",
        "hi": "ЁЯТЙ **рдЯреАрдХрд╛рдХрд░рдг рдХрд╛рд░реНрдпрдХреНрд░рдо:**\nЁЯС╢ рдЬрдиреНрдо: BCG, рд╣реЗрдкреЗрдЯрд╛рдЗрдЯрд┐рд╕ B\nЁЯН╝ 6 рд╕рдкреНрддрд╛рд╣: DPT-1, OPV-1\nЁЯУН 10 рд╕рдкреНрддрд╛рд╣: DPT-2, OPV-2\nЁЯОп 14 рд╕рдкреНрддрд╛рд╣: DPT-3, OPV-3\nЁЯПе рдХреЗрдВрджреНрд░ рдЦреЛрдЬреЗрдВ: 1075 рдкрд░ рдХреЙрд▓ рдХрд░реЗрдВ"
    },
    "emergency": {
        "en": "ЁЯЪи **EMERGENCY - Call NOW:**\nЁЯУЮ Ambulance: 102, 108\nЁЯПе For: Chest pain, breathing problems, severe bleeding\nтЪая╕П Don't wait - get help immediately!",
        "hi": "ЁЯЪи **рдЖрдкрд╛рддрдХрд╛рд▓ - рддреБрд░рдВрдд рдХреЙрд▓ рдХрд░реЗрдВ:**\nЁЯУЮ рдПрдореНрдмреБрд▓реЗрдВрд╕: 102, 108\nЁЯПе рдХреЗ рд▓рд┐рдП: рд╕реАрдиреЗ рдореЗрдВ рджрд░реНрдж, рд╕рд╛рдВрд╕ рдХреА рддрдХрд▓реАрдл, рддреЗрдЬ рдЦреВрди рдмрд╣рдирд╛\nтЪая╕П рдЗрдВрддрдЬрд╛рд░ рди рдХрд░реЗрдВ - рддреБрд░рдВрдд рдорджрдж рд▓реЗрдВ!"
    }
}

def detect_language(text):
    """Simple language detection"""
    hindi_chars = ['рд╣реИ', 'рдХрд╛', 'рдХреА', 'рдХреЗ', 'рдореЗрдВ', 'рд╕реЗ', 'рдХреЛ', 'рдмреБрдЦрд╛рд░', 'рджрд░реНрдж', 'рдЯреАрдХрд╛']
    return 'hi' if any(char in text for char in hindi_chars) else 'en'

def get_health_response(message):
    """Get appropriate health response"""
    message_lower = message.lower()
    language = detect_language(message)
    
    # Symptom detection
    if any(word in message_lower for word in ['fever', 'рдмреБрдЦрд╛рд░', 'temperature']):
        return HEALTH_RESPONSES["fever"][language]
    
    elif any(word in message_lower for word in ['vaccine', 'vaccination', 'рдЯреАрдХрд╛', 'рдЯреАрдХрд╛рдХрд░рдг']):
        return HEALTH_RESPONSES["vaccine"][language]
    
    elif any(word in message_lower for word in ['emergency', 'urgent', 'рдЖрдкрд╛рддрдХрд╛рд▓', 'chest pain']):
        return HEALTH_RESPONSES["emergency"][language]
    
    elif any(word in message_lower for word in ['headache', 'рд╕рд┐рд░ рджрд░реНрдж', 'head pain']):
        return "ЁЯТК For headache: Rest in dark room, drink water, apply cold compress. See doctor if severe." if language == 'en' else "ЁЯТК рд╕рд┐рд░ рджрд░реНрдж рдХреЗ рд▓рд┐рдП: рдЕрдВрдзреЗрд░реЗ рдХрдорд░реЗ рдореЗрдВ рдЖрд░рд╛рдо рдХрд░реЗрдВ, рдкрд╛рдиреА рдкрд┐рдПрдВ, рдардВрдбреА рдкрдЯреНрдЯреА рд▓рдЧрд╛рдПрдВред"
    
    elif any(word in message_lower for word in ['cough', 'рдЦрд╛рдВрд╕реА']):
        return "ЁЯШ╖ For cough: Warm liquids, honey, avoid cold. See doctor if persistent." if language == 'en' else "ЁЯШ╖ рдЦрд╛рдВрд╕реА рдХреЗ рд▓рд┐рдП: рдЧрд░реНрдо рддрд░рд▓, рд╢рд╣рдж рд▓реЗрдВ, рдардВрдбрд╛ рди рдЦрд╛рдПрдВред рд▓рдЧрд╛рддрд╛рд░ рдЦрд╛рдВрд╕реА рд╣реЛ рддреЛ рдбреЙрдХреНрдЯрд░ рдХреЛ рджрд┐рдЦрд╛рдПрдВред"
    
    # Default response
    if language == 'hi':
        return "рдирдорд╕реНрддреЗ! рдореИрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╕рд╣рд╛рдпрдХ рд╣реВрдВред рдореИрдВ рдмреБрдЦрд╛рд░, рд╕рд┐рд░ рджрд░реНрдж, рдЦрд╛рдВрд╕реА рдФрд░ рдЯреАрдХрд╛рдХрд░рдг рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВред"
    else:
        return "Hello! I'm your healthcare assistant. I can help with fever, headaches, cough, and vaccination information."

@app.get("/")
async def root():
    return {
        "message": "Healthcare Chatbot API is running! ЁЯПе",
        "version": "1.0.0",
        "features": ["Multilingual Support", "Symptom Checking", "Vaccination Info", "Emergency Guidance"],
        "endpoints": ["/", "/webhook", "/health"]
    }

@app.get("/health")
async def health_check():
    return {"status": "healthy", "timestamp": datetime.now().isoformat()}

@app.post("/webhook")
async def webhook(request: Request):
    """Handle incoming health queries"""
    try:
        body = await request.json()
        user_message = body.get("message", "Hello")
        
        # Get appropriate response
        bot_response = get_health_response(user_message)
        
        # Log interaction (simple)
        print(f"ЁЯУК User: {user_message} | Bot: {bot_response[:50]}...")
        
        return {
            "status": "success",
            "user_message": user_message,
            "bot_response": bot_response,
            "language": detect_language(user_message),
            "timestamp": datetime.now().isoformat()
        }
        
    except Exception as e:
        return {
            "status": "error", 
            "error": str(e),
            "timestamp": datetime.now().isoformat()
        }

if __name__ == "__main__":
    import os
    port = int(os.environ.get("PORT", 8000))
    uvicorn.run(app, host="0.0.0.0", port=port)
